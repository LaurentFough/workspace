:t t
let t = Lam "x" (App (Var "x") (Var "x"))
def t = Lam "x" (App (Var "x") (Var "x"))
Lam "x" (App (Var "x") (Var "x"))
:l test
Lam "x" (App (Var "x") (Var "x"))
Lam "x" (App (Var "x") (Var "x"))
Lam "x" (Var "x") (Var "x")
:l test
Var "x"
:l test
:t Abs
:l test
:l test
:l test
:t B
:t A
data Truc = A
data Truc = A | B
data truc = A | B
ls
head 5
lk
:q
head 5
:l jtg
:l jtg.hs
ls
ls
1
ls
:set prompt "\ESC[34m%s > \ESC[m"
id1 "e"
id1 2
:t id1
let id1 x = x
:t id1
let id1 x = x
:t id1
:a id1
:t id1
let id1 = \x -> x
let id1 :: Integer -> Integer = \x -> x
let id1 :: a -> a = \x -> x
let id1 :: a -> a
id1 :: a -> a
:t id id
id id
:t id
:t g
let g = \ x y -> x + y
:t f
let f x y = x + y
:t f
:t g
let g = \ x y -> x + y
:t filter
f 2
f
:t f
let f x y = x + y
let f x = x
fun x => "e"
fun x = "e"
fun x -> "e"
:t "e"
"e"
:t show
:t (++)
read "9"
read "9"
read "9"
read "a"
:t read
:t show
:t (==)
:t head
:t id
let id x = x
:t pi
pi
:t factorial
:t addThree 
let addThree x y z = x + y + z
:t 'jjhjhh'
:t "kjkjkj"
:t f
f 2
let f x = f x
a = 1
f 3
:l test.hs 
:l test.hs 
doubleMe 3
:l test.hs 
f x = x * 2
f x = f x
succ 8
